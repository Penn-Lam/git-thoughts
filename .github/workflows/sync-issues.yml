name: Sync Public Issues to issues.json

# 并发控制：同一时间只允许一个同步任务运行
concurrency:
  group: sync-issues
  cancel-in-progress: false  # 不取消正在运行的任务，而是排队等待

on:
  workflow_dispatch: # 手动按钮
  schedule:
    - cron: '0 2 * * *' # 每天凌晨 2 点同步一次，UTC 时间 → 对应法国是 4 点左右
  issues:
    types: [opened, edited] # 仅在创建和编辑时触发，不包含标签操作(labeled, unlabeled)

jobs:
  sync:
    runs-on: ubuntu-latest
    # 只在以下情况运行：
    # 1. 定时任务 - 确保数据同步
    # 2. 手动触发 - 管理员手动同步
    # 3. Issues 内容变化且带有 Public 标签 - 有新的公开内容需要同步
    if: >
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && 
       contains(github.event.issue.labels.*.name, 'Public') &&
       (github.event.action == 'opened' || github.event.action == 'edited'))
    permissions:
      contents: write  # 允许写入仓库内容
      issues: read     # 允许读取 issues
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install node-fetch@2

      - name: Wait for potential concurrent changes
        if: github.event_name == 'issues'
        run: sleep 10  # 等待10秒，避免频繁的连续触发

      - name: Run Sync Script
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          GITHUB_REPO: foreveryh/git-thoughts
        run: node fetch_issues.js

      - name: Check if issues.json was created
        run: |
          if [ -f "public/issues.json" ]; then
            echo "✅ issues.json file created successfully"
            ls -la public/
            echo "File content preview:"
            head -10 public/issues.json
          else
            echo "❌ issues.json file was not created"
            ls -la
            exit 1
          fi

      - name: Commit and Push issues.json
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Action"
          if [ -f "public/issues.json" ]; then
            git add public/issues.json
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              git commit -m "chore: update issues.json [skip ci]"
              git push
            fi
          else
            echo "No issues.json file to commit"
          fi